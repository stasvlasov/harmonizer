% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/harmonizer.r
\name{harmonize.replace}
\alias{harmonize.replace}
\title{A wrapper for string replacement and cbinding some columns.}
\usage{
harmonize.replace(
  x,
  patterns,
  patterns.col = 1,
  patterns.mode = c("all", "first", "last"),
  patterns.mode.col = NULL,
  patterns.type = c("fixed", "begins", "begins.trimmed", "ends", "ends.trimmed",
    "regex", "exact", "exact.trimmed"),
  patterns.type.col = NULL,
  patterns.replacements.col = 2,
  replacements = NULL,
  ...
)
}
\arguments{
\item{x}{Vector or table to harmonize.}

\item{patterns}{Accepts both vector or table. If patterns it is table can also include replacements column.}

\item{patterns.col}{If patterns is not a vector which column to use. Default is 1.}

\item{patterns.mode}{Mode of matching. Could be one of c("all", "first", "last"). The default is "all" (it is 2x faster than "first" and "last" because of handy stri_replace_all_* functions). Also possible to pass a vector (same length as patterns)}

\item{patterns.mode.col}{Column in patterns table with the mode of matching}

\item{patterns.type}{Kind of pattern. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are "begins", "ends" - which means that it should only match fixed pattern at the beginning of the string or at the and. Another possible value is "regex" (calling code{\link[stringi]{stri_replace_all_regex}})}

\item{patterns.type.col}{Column with the type of pattern in case when patterns should have different types}

\item{patterns.replacements.col}{If patterns is not a vector and includes replacements which column to use for replacements. Default is 2.}

\item{replacements}{If patterns does not have column with replacements provide it here.}

\item{...}{
  Arguments passed on to \code{\link[=harmonize.x]{harmonize.x}}
  \describe{
    \item{\code{inset.vector}}{a vector to inset. Optional. Default is NULL}
    \item{\code{x.col}}{vector of interest in \code{x} object}
    \item{\code{x.col.update}}{Update values in \code{x.col} column. Default is FALSE. If set \code{inset.append}, \code{inset.name} and \code{inset.suffix} are ignored. Also if set the default for \code{return.x.cols.all} will be set to TRUE.}
    \item{\code{x.rows}}{Logical vector to filter records of interest. Default is NULL which means do not filter records}
    \item{\code{x.atomic.name}}{If \code{x} is vector use this name for original column if it is in results. Default is "x". If \code{x} is table the name of \code{x.col} will be used.}
    \item{\code{inset.omitted.val}}{If \code{x.rows} is set merge these values to the results. It should be a vector of length 1 or \code{nrow(x)}. If the value is NULL (default) then use values of \code{x.col}.}
    \item{\code{inset.append}}{If set then put \code{inset.vector} as the last instead of first vector/column. Default is FALSE.}
    \item{\code{inset.suffix}}{If \code{inset.name} is not set the use this as suffix (default is "harmonized"). If the name with the same suffix already exists in \code{return.x.cols} it will add counter at the end to avoid variables with the same names.}
    \item{\code{inset.name}}{Use this name for the first column in results (harmonized names). Default is NULL, which means that either x.atomic.name if x is vector or original x.col name will be used with \code{inset.suffix} at the end.}
    \item{\code{return.x.cols}}{If x is table, set the columns to cbind to the result table. Default is cbind all but the original (unharmonized) column (x.col).}
    \item{\code{return.x.cols.all}}{Whether to bind all columns in x. Defaults depends on values of \code{x.col.update} and \code{inset.append}. If either is set then defaut values is TRUE otherwise FALSE. If set to TRUE by user the return.x.cols is ignored.}
  }}
}
\value{
If nothing was indicated to cbind to results then it returns harmonized vector. If something is needs to be cbind then it returns data.table
}
\description{
Optionally matches only at the beginning or at the end of the string.
}
